{"version":3,"sources":["pi-all.ts"],"names":["piAll","iterable","concurrency","Infinity","Number","isSafeInteger","TypeError","Symbol","asyncIterator","pool","Set","iterator","results","isDone","hasError","error","next","iteration","done","maybePromise","value","add","result","push","err","delete","i","size","Promise","race","values"],"mappings":";;;;;;;;;;AAEA,OAAO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAIC,QAAJ,EAAqG;AAAA,MAArDC,WAAqD,uEAA/BC,QAA+B;;AACxH,MAAK,CAACC,MAAM,CAACC,aAAP,CAAqBH,WAArB,CAAD,IAAsCA,WAAW,KAAKC,QAAvD,IAAoED,WAAW,GAAG,CAAtF,EAAyF;AACvF,UAAM,IAAII,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,6BACUC,MAAM,CAACC,aADjB,cACkC;AAAA;AAC9B,UAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACA,UAAMC,QAAQ,GAAGV,QAAQ,CAACM,MAAM,CAACI,QAAR,CAAR,EAAjB;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAG,KAAb;AACA,UAAIC,QAAQ,GAAG,KAAf;AACA,UAAIC,KAAJ;;AAEA,UAAMC,IAAI,GAAG,eAAPA,IAAO,GAA2B;AACtC,YAAMC,SAAS,GAAGN,QAAQ,CAACK,IAAT,EAAlB;;AAEA,YAAIC,SAAS,CAACC,IAAV,KAAmB,IAAvB,EAA6B;AAC3BL,UAAAA,MAAM,GAAG,IAAT;AAEA;AACD;;AAED,YAAIM,YAAJ;;AAEA,YAAI;AACFA,UAAAA,YAAY,GAAGF,SAAS,CAACG,KAAV,EAAf;AAEAX,UAAAA,IAAI,CAACY,GAAL,CAASF,YAAT;AAEA,cAAMG,MAAM,GAAG,MAAMH,YAArB;AAEAP,UAAAA,OAAO,CAACW,IAAR,CAAaD,MAAb;AACD,SARD,CAQE,OAAOE,GAAP,EAAY;AACZV,UAAAA,QAAQ,GAAG,IAAX;AACAC,UAAAA,KAAK,GAAGS,GAAR;AACD,SAXD,SAWU;AACRf,UAAAA,IAAI,CAACgB,MAAL,CAAYN,YAAZ;AACD;AACF,OAzBD;;AA2BA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,WAApB,EAAiCwB,CAAC,EAAlC,EAAsC;AACpC,aAAKV,IAAI,EAAT;;AAEA,YAAIH,MAAM,IAAIC,QAAd,EAAwB;AACtB;AACD;AACF;;AAED,aAAOL,IAAI,CAACkB,IAAL,KAAc,CAArB,EAAwB;AACtB;AACA,YAAIb,QAAJ,EAAc;AACZ,gBAAMC,KAAN;AACD;;AAED,mCAAMa,OAAO,CAACC,IAAR,CAAapB,IAAI,CAACqB,MAAL,EAAb,CAAN;;AANsB,mDAQDlB,OARC;AAAA;;AAAA;AAQtB,8DAA8B;AAAA,gBAAnBU,MAAmB;AAC5B,kBAAMA,MAAN;;AAEA,gBAAI,CAACT,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB,mBAAKE,IAAI,EAAT;AACD;AACF;AAdqB;AAAA;AAAA;AAAA;AAAA;;AAgBtBJ,QAAAA,OAAO,GAAG,EAAV,CAhBsB,CAkBtB;;AACA,YAAIE,QAAJ,EAAc;AACZ,gBAAMC,KAAN;AACD;AACF;AAjE6B;AAkE/B,GAnEH;AAqED,CA1EM","sourcesContent":["import type { TMaybePromise } from './types'\n\nexport const piAll = <T>(iterable: Iterable<() => TMaybePromise<T>>, concurrency: number = Infinity): AsyncIterable<T> => {\n  if ((!Number.isSafeInteger(concurrency) && concurrency !== Infinity) || concurrency < 1) {\n    throw new TypeError('`concurrency` argument must be a number >= 1')\n  }\n\n  return {\n    async *[Symbol.asyncIterator]() {\n      const pool = new Set<TMaybePromise<T>>()\n      const iterator = iterable[Symbol.iterator]()\n      let results = [] as T[]\n      let isDone = false\n      let hasError = false\n      let error\n\n      const next = async (): Promise<void> => {\n        const iteration = iterator.next()\n\n        if (iteration.done === true) {\n          isDone = true\n\n          return\n        }\n\n        let maybePromise: TMaybePromise<T>\n\n        try {\n          maybePromise = iteration.value()\n\n          pool.add(maybePromise)\n\n          const result = await maybePromise\n\n          results.push(result)\n        } catch (err) {\n          hasError = true\n          error = err\n        } finally {\n          pool.delete(maybePromise!)\n        }\n      }\n\n      for (let i = 0; i < concurrency; i++) {\n        void next()\n\n        if (isDone || hasError) {\n          break\n        }\n      }\n\n      while (pool.size !== 0) {\n        // sync error\n        if (hasError) {\n          throw error\n        }\n\n        await Promise.race(pool.values())\n\n        for (const result of results) {\n          yield result\n\n          if (!isDone && !hasError) {\n            void next()\n          }\n        }\n\n        results = []\n\n        // reject\n        if (hasError) {\n          throw error\n        }\n      }\n    },\n  }\n}\n"],"file":"pi-all.js"}