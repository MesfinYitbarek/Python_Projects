import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _awaitAsyncGenerator from "@babel/runtime/helpers/esm/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/esm/wrapAsyncGenerator";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export var piAll = function piAll(iterable) {
  var concurrency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;

  if (!Number.isSafeInteger(concurrency) && concurrency !== Infinity || concurrency < 1) {
    throw new TypeError('`concurrency` argument must be a number >= 1');
  }

  return _defineProperty({}, Symbol.asyncIterator, function () {
    return _wrapAsyncGenerator(function* () {
      var pool = new Set();
      var iterator = iterable[Symbol.iterator]();
      var results = [];
      var isDone = false;
      var hasError = false;
      var error;

      var next = async function next() {
        var iteration = iterator.next();

        if (iteration.done === true) {
          isDone = true;
          return;
        }

        var maybePromise;

        try {
          maybePromise = iteration.value();
          pool.add(maybePromise);
          var result = await maybePromise;
          results.push(result);
        } catch (err) {
          hasError = true;
          error = err;
        } finally {
          pool.delete(maybePromise);
        }
      };

      for (var i = 0; i < concurrency; i++) {
        void next();

        if (isDone || hasError) {
          break;
        }
      }

      while (pool.size !== 0) {
        // sync error
        if (hasError) {
          throw error;
        }

        yield _awaitAsyncGenerator(Promise.race(pool.values()));

        var _iterator = _createForOfIteratorHelper(results),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var result = _step.value;
            yield result;

            if (!isDone && !hasError) {
              void next();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        results = []; // reject

        if (hasError) {
          throw error;
        }
      }
    })();
  });
};
//# sourceMappingURL=pi-all.js.map