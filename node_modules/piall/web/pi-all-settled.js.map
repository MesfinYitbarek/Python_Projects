{"version":3,"sources":["pi-all-settled.ts"],"names":["piAllSettled","iterable","concurrency","Infinity","Number","isSafeInteger","TypeError","Symbol","asyncIterator","pool","Set","iterator","results","isDone","next","iteration","done","maybePromise","value","add","result","push","status","error","reason","delete","i","size","Promise","race","values"],"mappings":";;;;;;;;;;AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAIC,QAAJ,EAA6H;AAAA,MAA7EC,WAA6E,uEAAvDC,QAAuD;;AACvJ,MAAK,CAACC,MAAM,CAACC,aAAP,CAAqBH,WAArB,CAAD,IAAsCA,WAAW,KAAKC,QAAvD,IAAoED,WAAW,GAAG,CAAtF,EAAyF;AACvF,UAAM,IAAII,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,6BACUC,MAAM,CAACC,aADjB,cACkC;AAAA;AAC9B,UAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACA,UAAMC,QAAQ,GAAGV,QAAQ,CAACM,MAAM,CAACI,QAAR,CAAR,EAAjB;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAG,KAAb;;AAEA,UAAMC,IAAI,GAAG,eAAPA,IAAO,GAA2B;AACtC,YAAMC,SAAS,GAAGJ,QAAQ,CAACG,IAAT,EAAlB;;AAEA,YAAIC,SAAS,CAACC,IAAV,KAAmB,IAAvB,EAA6B;AAC3BH,UAAAA,MAAM,GAAG,IAAT;AAEA;AACD;;AAED,YAAII,YAAJ;;AAEA,YAAI;AACFA,UAAAA,YAAY,GAAGF,SAAS,CAACG,KAAV,EAAf;AAEAT,UAAAA,IAAI,CAACU,GAAL,CAASF,YAAT;AAEA,cAAMG,MAAM,GAAG,MAAMH,YAArB;AAEAL,UAAAA,OAAO,CAACS,IAAR,CAAa;AAAEC,YAAAA,MAAM,EAAE,WAAV;AAAuBJ,YAAAA,KAAK,EAAEE;AAA9B,WAAb;AACD,SARD,CAQE,OAAOG,KAAP,EAAc;AACdX,UAAAA,OAAO,CAACS,IAAR,CAAa;AAAEC,YAAAA,MAAM,EAAE,UAAV;AAAsBE,YAAAA,MAAM,EAAED;AAA9B,WAAb;AACD,SAVD,SAUU;AACRd,UAAAA,IAAI,CAACgB,MAAL,CAAYR,YAAZ;AACD;AACF,OAxBD;;AA0BA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,WAApB,EAAiCwB,CAAC,EAAlC,EAAsC;AACpC;AACAZ,QAAAA,IAAI;;AAEJ,YAAID,MAAJ,EAAY;AACV;AACD;AACF;;AAED,aAAOJ,IAAI,CAACkB,IAAL,KAAc,CAArB,EAAwB;AACtB,YAAI;AACF,qCAAMC,OAAO,CAACC,IAAR,CAAapB,IAAI,CAACqB,MAAL,EAAb,CAAN;AACD,SAFD,CAEE,gBAAM,CACN;AACD,SAJD,SAIU;AAAA,qDACalB,OADb;AAAA;;AAAA;AACR,gEAA8B;AAAA,kBAAnBQ,MAAmB;AAC5B,oBAAMA,MAAN;;AAEA,kBAAI,CAACP,MAAL,EAAa;AACX,qBAAKC,IAAI,EAAT;AACD;AACF;AAPO;AAAA;AAAA;AAAA;AAAA;;AASRF,UAAAA,OAAO,GAAG,EAAV;AACD;AACF;AAzD6B;AA0D/B,GA3DH;AA6DD,CAlEM","sourcesContent":["import type { TFulfilled, TRejected, TMaybePromise } from './types'\n\nexport const piAllSettled = <T>(iterable: Iterable<() => TMaybePromise<T>>, concurrency: number = Infinity): AsyncIterable<TFulfilled<T> | TRejected> => {\n  if ((!Number.isSafeInteger(concurrency) && concurrency !== Infinity) || concurrency < 1) {\n    throw new TypeError('`concurrency` argument must be a number >= 1')\n  }\n\n  return {\n    async *[Symbol.asyncIterator]() {\n      const pool = new Set<TMaybePromise<T>>()\n      const iterator = iterable[Symbol.iterator]()\n      let results = [] as (TFulfilled<T> | TRejected)[]\n      let isDone = false\n\n      const next = async (): Promise<void> => {\n        const iteration = iterator.next()\n\n        if (iteration.done === true) {\n          isDone = true\n\n          return\n        }\n\n        let maybePromise: TMaybePromise<T>\n\n        try {\n          maybePromise = iteration.value()\n\n          pool.add(maybePromise)\n\n          const result = await maybePromise\n\n          results.push({ status: 'fulfilled', value: result })\n        } catch (error) {\n          results.push({ status: 'rejected', reason: error })\n        } finally {\n          pool.delete(maybePromise!)\n        }\n      }\n\n      for (let i = 0; i < concurrency; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        next()\n\n        if (isDone) {\n          break\n        }\n      }\n\n      while (pool.size !== 0) {\n        try {\n          await Promise.race(pool.values())\n        } catch {\n          // ignore, it's in `results` already\n        } finally {\n          for (const result of results) {\n            yield result\n\n            if (!isDone) {\n              void next()\n            }\n          }\n\n          results = []\n        }\n      }\n    },\n  }\n}\n"],"file":"pi-all-settled.js"}