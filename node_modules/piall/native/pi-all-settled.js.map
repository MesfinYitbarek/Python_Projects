{"version":3,"sources":["pi-all-settled.ts"],"names":["piAllSettled","iterable","concurrency","Infinity","Number","isSafeInteger","TypeError","Symbol","asyncIterator","pool","Set","iterator","results","isDone","next","iteration","done","maybePromise","value","add","result","push","status","reason","delete","i","size","Promise","race","values"],"mappings":";;;;;;;;;;;;;;;;;AAEO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAIC,QAAJ,EAA6H;AAAA,MAA7EC,WAA6E,uEAAvDC,QAAuD;;AACvJ,MAAK,CAACC,MAAM,CAACC,aAAP,CAAqBH,WAArB,CAAD,IAAsCA,WAAW,KAAKC,QAAvD,IAAoED,WAAW,GAAG,CAAtF,EAAyF;AACvF,UAAM,IAAII,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,2CACUC,MAAM,CAACC,aADjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEUC,YAAAA,IAFV,GAEiB,IAAIC,GAAJ,EAFjB;AAGUC,YAAAA,QAHV,GAGqBV,QAAQ,CAACM,MAAM,CAACI,QAAR,CAAR,EAHrB;AAIQC,YAAAA,OAJR,GAIkB,EAJlB;AAKQC,YAAAA,MALR,GAKiB,KALjB;;AAOUC,YAAAA,IAPV,GAOiB,SAAPA,IAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,sBAAAA,SADK,GACOJ,QAAQ,CAACG,IAAT,EADP;;AAAA,4BAGPC,SAAS,CAACC,IAAV,KAAmB,IAHZ;AAAA;AAAA;AAAA;;AAITH,sBAAAA,MAAM,GAAG,IAAT;AAJS;;AAAA;AAAA;AAYTI,sBAAAA,YAAY,GAAGF,SAAS,CAACG,KAAV,EAAf;AAEAT,sBAAAA,IAAI,CAACU,GAAL,CAASF,YAAT;AAdS;AAAA,wDAgBYA,YAhBZ;;AAAA;AAgBHG,sBAAAA,MAhBG;AAkBTR,sBAAAA,OAAO,CAACS,IAAR,CAAa;AAAEC,wBAAAA,MAAM,EAAE,WAAV;AAAuBJ,wBAAAA,KAAK,EAAEE;AAA9B,uBAAb;AAlBS;AAAA;;AAAA;AAAA;AAAA;AAoBTR,sBAAAA,OAAO,CAACS,IAAR,CAAa;AAAEC,wBAAAA,MAAM,EAAE,UAAV;AAAsBC,wBAAAA,MAAM;AAA5B,uBAAb;;AApBS;AAAA;AAsBTd,sBAAAA,IAAI,CAACe,MAAL,CAAYP,YAAZ;AAtBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPjB;;AAiCaQ,YAAAA,CAjCb,GAiCiB,CAjCjB;;AAAA;AAAA,kBAiCoBA,CAAC,GAAGvB,WAjCxB;AAAA;AAAA;AAAA;;AAmCMY,YAAAA,IAAI;;AAnCV,iBAqCUD,MArCV;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAiCqCY,YAAAA,CAAC,EAjCtC;AAAA;AAAA;;AAAA;AAAA,kBA0CWhB,IAAI,CAACiB,IAAL,KAAc,CA1CzB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,8CA4CcC,OAAO,CAACC,IAAR,CAAanB,IAAI,CAACoB,MAAL,EAAb,CA5Cd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,wDAgD6BjB,OAhD7B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgDmBQ,YAAAA,MAhDnB;AAAA;AAiDU,mBAAMA,MAAN;;AAjDV;AAmDU,gBAAI,CAACP,MAAL,EAAa;AACX,mBAAKC,IAAI,EAAT;AACD;;AArDX;AAAA;AAAA;;AAAA;AAwDQF,YAAAA,OAAO,GAAG,EAAV;AAxDR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DD,CAlEM","sourcesContent":["import type { TFulfilled, TRejected, TMaybePromise } from './types'\n\nexport const piAllSettled = <T>(iterable: Iterable<() => TMaybePromise<T>>, concurrency: number = Infinity): AsyncIterable<TFulfilled<T> | TRejected> => {\n  if ((!Number.isSafeInteger(concurrency) && concurrency !== Infinity) || concurrency < 1) {\n    throw new TypeError('`concurrency` argument must be a number >= 1')\n  }\n\n  return {\n    async *[Symbol.asyncIterator]() {\n      const pool = new Set<TMaybePromise<T>>()\n      const iterator = iterable[Symbol.iterator]()\n      let results = [] as (TFulfilled<T> | TRejected)[]\n      let isDone = false\n\n      const next = async (): Promise<void> => {\n        const iteration = iterator.next()\n\n        if (iteration.done === true) {\n          isDone = true\n\n          return\n        }\n\n        let maybePromise: TMaybePromise<T>\n\n        try {\n          maybePromise = iteration.value()\n\n          pool.add(maybePromise)\n\n          const result = await maybePromise\n\n          results.push({ status: 'fulfilled', value: result })\n        } catch (error) {\n          results.push({ status: 'rejected', reason: error })\n        } finally {\n          pool.delete(maybePromise!)\n        }\n      }\n\n      for (let i = 0; i < concurrency; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        next()\n\n        if (isDone) {\n          break\n        }\n      }\n\n      while (pool.size !== 0) {\n        try {\n          await Promise.race(pool.values())\n        } catch {\n          // ignore, it's in `results` already\n        } finally {\n          for (const result of results) {\n            yield result\n\n            if (!isDone) {\n              void next()\n            }\n          }\n\n          results = []\n        }\n      }\n    },\n  }\n}\n"],"file":"pi-all-settled.js"}