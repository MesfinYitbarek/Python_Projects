var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.piAllSettled = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var piAllSettled = function piAllSettled(iterable) {
  var concurrency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;

  if (!Number.isSafeInteger(concurrency) && concurrency !== Infinity || concurrency < 1) {
    throw new TypeError('`concurrency` argument must be a number >= 1');
  }

  return (0, _defineProperty2.default)({}, Symbol.asyncIterator, _regenerator.default.mark(function _callee() {
    var pool, iterator, results, isDone, next, i, _iterator, _step, result;

    return _regenerator.default.async(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pool = new Set();
            iterator = iterable[Symbol.iterator]();
            results = [];
            isDone = false;

            next = function next() {
              var iteration, maybePromise, result;
              return _regenerator.default.async(function next$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      iteration = iterator.next();

                      if (!(iteration.done === true)) {
                        _context.next = 4;
                        break;
                      }

                      isDone = true;
                      return _context.abrupt("return");

                    case 4:
                      _context.prev = 4;
                      maybePromise = iteration.value();
                      pool.add(maybePromise);
                      _context.next = 9;
                      return _regenerator.default.awrap(maybePromise);

                    case 9:
                      result = _context.sent;
                      results.push({
                        status: 'fulfilled',
                        value: result
                      });
                      _context.next = 16;
                      break;

                    case 13:
                      _context.prev = 13;
                      _context.t0 = _context["catch"](4);
                      results.push({
                        status: 'rejected',
                        reason: _context.t0
                      });

                    case 16:
                      _context.prev = 16;
                      pool.delete(maybePromise);
                      return _context.finish(16);

                    case 19:
                    case "end":
                      return _context.stop();
                  }
                }
              }, null, null, [[4, 13, 16, 19]], Promise);
            };

            i = 0;

          case 6:
            if (!(i < concurrency)) {
              _context2.next = 13;
              break;
            }

            next();

            if (!isDone) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("break", 13);

          case 10:
            i++;
            _context2.next = 6;
            break;

          case 13:
            if (!(pool.size !== 0)) {
              _context2.next = 34;
              break;
            }

            _context2.prev = 14;
            _context2.next = 17;
            return _regenerator.default.awrap(Promise.race(pool.values()));

          case 17:
            _context2.next = 21;
            break;

          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](14);

          case 21:
            _context2.prev = 21;
            _iterator = _createForOfIteratorHelperLoose(results);

          case 23:
            if ((_step = _iterator()).done) {
              _context2.next = 30;
              break;
            }

            result = _step.value;
            _context2.next = 27;
            return result;

          case 27:
            if (!isDone) {
              void next();
            }

          case 28:
            _context2.next = 23;
            break;

          case 30:
            results = [];
            return _context2.finish(21);

          case 32:
            _context2.next = 13;
            break;

          case 34:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[14, 19, 21, 32]], Promise);
  }));
};

exports.piAllSettled = piAllSettled;
//# sourceMappingURL=pi-all-settled.js.map