{"version":3,"sources":["pi-all.ts"],"names":["piAll","iterable","concurrency","Infinity","Number","isSafeInteger","TypeError","Symbol","asyncIterator","pool","Set","iterator","results","isDone","hasError","next","iteration","done","maybePromise","value","add","result","push","error","delete","i","size","Promise","race","values"],"mappings":";;;;;;;;;;;;;;;;;AAEO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAIC,QAAJ,EAAqG;AAAA,MAArDC,WAAqD,uEAA/BC,QAA+B;;AACxH,MAAK,CAACC,MAAM,CAACC,aAAP,CAAqBH,WAArB,CAAD,IAAsCA,WAAW,KAAKC,QAAvD,IAAoED,WAAW,GAAG,CAAtF,EAAyF;AACvF,UAAM,IAAII,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,2CACUC,MAAM,CAACC,aADjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEUC,YAAAA,IAFV,GAEiB,IAAIC,GAAJ,EAFjB;AAGUC,YAAAA,QAHV,GAGqBV,QAAQ,CAACM,MAAM,CAACI,QAAR,CAAR,EAHrB;AAIQC,YAAAA,OAJR,GAIkB,EAJlB;AAKQC,YAAAA,MALR,GAKiB,KALjB;AAMQC,YAAAA,QANR,GAMmB,KANnB;;AASUC,YAAAA,IATV,GASiB,SAAPA,IAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,sBAAAA,SADK,GACOL,QAAQ,CAACI,IAAT,EADP;;AAAA,4BAGPC,SAAS,CAACC,IAAV,KAAmB,IAHZ;AAAA;AAAA;AAAA;;AAITJ,sBAAAA,MAAM,GAAG,IAAT;AAJS;;AAAA;AAAA;AAYTK,sBAAAA,YAAY,GAAGF,SAAS,CAACG,KAAV,EAAf;AAEAV,sBAAAA,IAAI,CAACW,GAAL,CAASF,YAAT;AAdS;AAAA,wDAgBYA,YAhBZ;;AAAA;AAgBHG,sBAAAA,MAhBG;AAkBTT,sBAAAA,OAAO,CAACU,IAAR,CAAaD,MAAb;AAlBS;AAAA;;AAAA;AAAA;AAAA;AAoBTP,sBAAAA,QAAQ,GAAG,IAAX;AACAS,sBAAAA,KAAK,cAAL;;AArBS;AAAA;AAuBTd,sBAAAA,IAAI,CAACe,MAAL,CAAYN,YAAZ;AAvBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aATjB;;AAoCaO,YAAAA,CApCb,GAoCiB,CApCjB;;AAAA;AAAA,kBAoCoBA,CAAC,GAAGvB,WApCxB;AAAA;AAAA;AAAA;;AAqCM,iBAAKa,IAAI,EAAT;;AArCN,kBAuCUF,MAAM,IAAIC,QAvCpB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAoCqCW,YAAAA,CAAC,EApCtC;AAAA;AAAA;;AAAA;AAAA,kBA4CWhB,IAAI,CAACiB,IAAL,KAAc,CA5CzB;AAAA;AAAA;AAAA;;AAAA,iBA8CUZ,QA9CV;AAAA;AAAA;AAAA;;AAAA,kBA+CcS,KA/Cd;;AAAA;AAAA;AAAA,8CAkDYI,OAAO,CAACC,IAAR,CAAanB,IAAI,CAACoB,MAAL,EAAb,CAlDZ;;AAAA;AAAA,wDAoD2BjB,OApD3B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoDiBS,YAAAA,MApDjB;AAAA;AAqDQ,mBAAMA,MAAN;;AArDR;AAuDQ,gBAAI,CAACR,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB,mBAAKC,IAAI,EAAT;AACD;;AAzDT;AAAA;AAAA;;AAAA;AA4DMH,YAAAA,OAAO,GAAG,EAAV;;AA5DN,iBA+DUE,QA/DV;AAAA;AAAA;AAAA;;AAAA,kBAgEcS,KAhEd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqED,CA1EM","sourcesContent":["import type { TMaybePromise } from './types'\n\nexport const piAll = <T>(iterable: Iterable<() => TMaybePromise<T>>, concurrency: number = Infinity): AsyncIterable<T> => {\n  if ((!Number.isSafeInteger(concurrency) && concurrency !== Infinity) || concurrency < 1) {\n    throw new TypeError('`concurrency` argument must be a number >= 1')\n  }\n\n  return {\n    async *[Symbol.asyncIterator]() {\n      const pool = new Set<TMaybePromise<T>>()\n      const iterator = iterable[Symbol.iterator]()\n      let results = [] as T[]\n      let isDone = false\n      let hasError = false\n      let error\n\n      const next = async (): Promise<void> => {\n        const iteration = iterator.next()\n\n        if (iteration.done === true) {\n          isDone = true\n\n          return\n        }\n\n        let maybePromise: TMaybePromise<T>\n\n        try {\n          maybePromise = iteration.value()\n\n          pool.add(maybePromise)\n\n          const result = await maybePromise\n\n          results.push(result)\n        } catch (err) {\n          hasError = true\n          error = err\n        } finally {\n          pool.delete(maybePromise!)\n        }\n      }\n\n      for (let i = 0; i < concurrency; i++) {\n        void next()\n\n        if (isDone || hasError) {\n          break\n        }\n      }\n\n      while (pool.size !== 0) {\n        // sync error\n        if (hasError) {\n          throw error\n        }\n\n        await Promise.race(pool.values())\n\n        for (const result of results) {\n          yield result\n\n          if (!isDone && !hasError) {\n            void next()\n          }\n        }\n\n        results = []\n\n        // reject\n        if (hasError) {\n          throw error\n        }\n      }\n    },\n  }\n}\n"],"file":"pi-all.js"}